/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace Apache.Hadoop.Hbase.Thrift
{

  /// <summary>
  /// A Mutation object is used to either update or delete a column-value.
  /// </summary>
  public partial class Mutation : TBase
  {
    private bool _isDelete;
    private byte[] _column;
    private byte[] _value;
    private bool _writeToWAL;

    public bool IsDelete
    {
      get
      {
        return _isDelete;
      }
      set
      {
        __isset.isDelete = true;
        this._isDelete = value;
      }
    }

    public byte[] Column
    {
      get
      {
        return _column;
      }
      set
      {
        __isset.column = true;
        this._column = value;
      }
    }

    public byte[] Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }

    public bool WriteToWAL
    {
      get
      {
        return _writeToWAL;
      }
      set
      {
        __isset.writeToWAL = true;
        this._writeToWAL = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool isDelete;
      public bool column;
      public bool @value;
      public bool writeToWAL;
    }

    public Mutation()
    {
      this._isDelete = false;
      this.__isset.isDelete = true;
      this._writeToWAL = true;
      this.__isset.writeToWAL = true;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool)
              {
                IsDelete = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Column = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Value = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Bool)
              {
                WriteToWAL = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("Mutation");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.isDelete)
        {
          field.Name = "isDelete";
          field.Type = TType.Bool;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(IsDelete, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Column != null && __isset.column)
        {
          field.Name = "column";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Column, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Value != null && __isset.@value)
        {
          field.Name = "value";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Value, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.writeToWAL)
        {
          field.Name = "writeToWAL";
          field.Type = TType.Bool;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(WriteToWAL, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as Mutation;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.isDelete == other.__isset.isDelete) && ((!__isset.isDelete) || (System.Object.Equals(IsDelete, other.IsDelete))))
        && ((__isset.column == other.__isset.column) && ((!__isset.column) || (System.Object.Equals(Column, other.Column))))
        && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (System.Object.Equals(Value, other.Value))))
        && ((__isset.writeToWAL == other.__isset.writeToWAL) && ((!__isset.writeToWAL) || (System.Object.Equals(WriteToWAL, other.WriteToWAL))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.isDelete)
          hashcode = (hashcode * 397) + IsDelete.GetHashCode();
        if(__isset.column)
          hashcode = (hashcode * 397) + Column.GetHashCode();
        if(__isset.@value)
          hashcode = (hashcode * 397) + Value.GetHashCode();
        if(__isset.writeToWAL)
          hashcode = (hashcode * 397) + WriteToWAL.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("Mutation(");
      bool __first = true;
      if (__isset.isDelete)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IsDelete: ");
        sb.Append(IsDelete);
      }
      if (Column != null && __isset.column)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Column: ");
        sb.Append(Column);
      }
      if (Value != null && __isset.@value)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Value: ");
        sb.Append(Value);
      }
      if (__isset.writeToWAL)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("WriteToWAL: ");
        sb.Append(WriteToWAL);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
